#include <stdint.h>
#include <vector>

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "KlvParser.hpp"


class KlvParserTest : public ::testing::Test {
protected:
    KlvParserTest() {
    }

    virtual ~KlvParserTest() {
        // Code here will be called immediately after the constructor (right
		// before each test).
    }

    virtual void SetUp() {
        // Code here will be called immediately after each test (right
		// before the destructor).
    }

    virtual void TearDown() {

    }

    // objects delclared here can be used by all tests in the test case forKlvParserTestKlvTest

};

static void printByteVector(const std::vector<uint8_t> vec) {
    printf("{ ");
    for(uint8_t const &b : vec) {
        printf("%02x, ", b);
    }
    printf("}");
}

TEST_F(KlvParserTest, TestParsePkt) {
    // test parse a single packet

    // key: 0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00
    // len: 0x81, 0x90 (144 bytes)
    // val: the rest
    std::vector<uint8_t> test_pkt = { 0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x81, 0x90, 0x02, 0x08, 0x00, 0x04, 0x6C, 0xAE, 0x70, 0xF9, 0x80, 0xCF, 0x41, 0x01, 0x01, 0x05, 0x02, 0xE1, 0x91, 0x06, 0x02, 0x06, 0x0D, 0x07, 0x02, 0x0A, 0xE1, 0x0B, 0x02, 0x49, 0x52, 0x0C, 0x0E, 0x47, 0x65, 0x6F, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0D, 0x04, 0x4D, 0xCC, 0x41, 0x90, 0x0E, 0x04, 0xB1, 0xD0, 0x3D, 0x96, 0x0F, 0x02, 0x1B, 0x2E, 0x10, 0x02, 0x00, 0x84, 0x11, 0x02, 0x00, 0x4A, 0x12, 0x04, 0xE7, 0x23, 0x0B, 0x61, 0x13, 0x04, 0xFD, 0xE8, 0x63, 0x8E, 0x14, 0x04, 0x03, 0x0B, 0xC7, 0x1C, 0x15, 0x04, 0x00, 0x9F, 0xB9, 0x38, 0x16, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x17, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x18, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x19, 0x02, 0x0B, 0x8A, 0x28, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x29, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x2A, 0x02, 0x0B, 0x8A, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x9F, 0x85, 0x4D, 0x01, 0x02, 0xB7, 0xEB };

    KlvParser parser({KlvParser::KEY_ENCODING_16_BYTE});

    // for each byte in the test packet, pass it through the parser until we get a valid Klv object
    KLV* parsed_klv = NULL;
    int i;
    for(i = 0; i < test_pkt.size(); i++) {
        parsed_klv = parser.parseByte(test_pkt[i]);
    
        if(parsed_klv != NULL)
            break;
    }

    // check if entire test_pkt was read
    EXPECT_GE(i+1, test_pkt.size());

    // check if we actually parsed a valid KLV
    ASSERT_TRUE(parsed_klv != NULL);

    std::vector<uint8_t> test_key = {0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00};
    std::vector<uint8_t> test_len = {0x81, 0x90};
    std::vector<uint8_t> test_val = {0x02, 0x08, 0x00, 0x04, 0x6C, 0xAE, 0x70, 0xF9, 0x80, 0xCF, 0x41, 0x01, 0x01, 0x05, 0x02, 0xE1, 0x91, 0x06, 0x02, 0x06, 0x0D, 0x07, 0x02, 0x0A, 0xE1, 0x0B, 0x02, 0x49, 0x52, 0x0C, 0x0E, 0x47, 0x65, 0x6F, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0D, 0x04, 0x4D, 0xCC, 0x41, 0x90, 0x0E, 0x04, 0xB1, 0xD0, 0x3D, 0x96, 0x0F, 0x02, 0x1B, 0x2E, 0x10, 0x02, 0x00, 0x84, 0x11, 0x02, 0x00, 0x4A, 0x12, 0x04, 0xE7, 0x23, 0x0B, 0x61, 0x13, 0x04, 0xFD, 0xE8, 0x63, 0x8E, 0x14, 0x04, 0x03, 0x0B, 0xC7, 0x1C, 0x15, 0x04, 0x00, 0x9F, 0xB9, 0x38, 0x16, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x17, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x18, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x19, 0x02, 0x0B, 0x8A, 0x28, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x29, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x2A, 0x02, 0x0B, 0x8A, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x9F, 0x85, 0x4D, 0x01, 0x02, 0xB7, 0xEB };

    EXPECT_THAT(test_key, ::testing::ContainerEq(parsed_klv->getKey()));
    EXPECT_THAT(test_len, ::testing::ContainerEq(parsed_klv->getLenEncoded()));
    EXPECT_THAT(test_val, ::testing::ContainerEq(parsed_klv->getValue()));

    if(parsed_klv != NULL)
        delete parsed_klv;
}

TEST_F(KlvParserTest, TestTree) {
    // test that the tree is constructed correctly

    std::vector<uint8_t> test_pkt_uas = {0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x81, 0x90, 0x02, 0x08, 0x00, 0x04, 0x6C, 0xAE, 0x70, 0xF9, 0x80, 0xCF, 0x41, 0x01, 0x01, 0x05, 0x02, 0xE1, 0x91, 0x06, 0x02, 0x06, 0x0D, 0x07, 0x02, 0x0A, 0xE1, 0x0B, 0x02, 0x49, 0x52, 0x0C, 0x0E, 0x47, 0x65, 0x6F, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0D, 0x04, 0x4D, 0xCC, 0x41, 0x90, 0x0E, 0x04, 0xB1, 0xD0, 0x3D, 0x96, 0x0F, 0x02, 0x1B, 0x2E, 0x10, 0x02, 0x00, 0x84, 0x11, 0x02, 0x00, 0x4A, 0x12, 0x04, 0xE7, 0x23, 0x0B, 0x61, 0x13, 0x04, 0xFD, 0xE8, 0x63, 0x8E, 0x14, 0x04, 0x03, 0x0B, 0xC7, 0x1C, 0x15, 0x04, 0x00, 0x9F, 0xB9, 0x38, 0x16, 0x04, 0x00, 0x00, 0x01, 0xF8, 0x17, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x18, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x19, 0x02, 0x0B, 0x8A, 0x28, 0x04, 0x4D, 0xEC, 0xDA, 0xF4, 0x29, 0x04, 0xB1, 0xBC, 0x81, 0x74, 0x2A, 0x02, 0x0B, 0x8A, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x9F, 0x85, 0x4D, 0x01, 0x02, 0xB7, 0xEB};

    // TODO: need to create a test packet that has sub-klv elements in it
    KlvParser parser({KlvParser::KEY_ENCODING_16_BYTE, KlvParser::KEY_ENCODING_BER_OID});

    // for each byte in the test packet, pass it through the parser until we get a valid Klv object
    KLV* parsed_klv = NULL;
    int i;
    for(i = 0; i < test_pkt_uas.size(); i++) {
        parsed_klv = parser.parseByte(test_pkt_uas[i]);
    
        if(parsed_klv != NULL)
            break;
    }

    // check if entire test_pkt was read
    EXPECT_GE(i+1, test_pkt_uas.size());

    // check if we actually parsed a valid KLV
    ASSERT_TRUE(parsed_klv != NULL);

    auto map = parsed_klv->indexToMap();

    printf("map.size() : %ld\n", map.size());
    for(auto pair : map) {
        printByteVector(pair.first);
        printf(" - ");
        printByteVector(pair.second.getValue());
        printf("\n");
    }

    if(parsed_klv != NULL)
        delete parsed_klv;
}

TEST_F(KlvParserTest, TestParseMultiplePkts) {
    
}

TEST_F(KlvParserTest, TestParsePartialPkt) {
    
}

TEST_F(KlvParserTest, TestParsePktExtraFront) {
    
}